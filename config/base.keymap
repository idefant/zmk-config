#define ZMK_POINTING_DEFAULT_MOVE_VAL 600  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20   // 10

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

&mmv {
    acceleration-exponent = <1>;  // 1
    time-to-max-speed-ms = <0>;   // 0
    delay-ms = <0>;
    trigger-period-ms = <8>;      // 16
};

&msc {
    acceleration-exponent = <1>;  // 1
    time-to-max-speed-ms = <0>;   // 0
    delay-ms = <0>;
    trigger-period-ms = <8>;      // 16
};

&caps_word {
    /delete-property/ ignore-modifiers;

    continue-list = <UNDERSCORE BACKSPACE DELETE LSHFT RSHFT>;
};

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    macros {
        to_russian: to_russian {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N2)) &to 0>;
            label = "TO_RUSSIAN";
        };

        to_english: to_english {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N1)) &to 7>;
            label = "TO_ENGLISH";
        };
    };

    combos {
        compatible = "zmk,combos";

        bt_left_combo {
            bindings = <&mo 6>;
            key-positions = <36 37 38>;
        };

        bt_right_combo {
            bindings = <&mo 6>;
            key-positions = <39 40 41>;
        };
    };

    behaviors {
        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;

            ignored-key-positions = <8 19 20 21>;
        };

        hash_num: hash_num {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(N3)>, <&kp RA(LS(N3))>;

            mods = <(MOD_LSFT)>;
        };

        slash_backslash: slash_backslash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(SLASH)>, <&kp RA(BACKSLASH)>;

            mods = <(MOD_LSFT)>;
            label = "SLASH_BACKSLASH";
        };

        tabber: tabber {
            compatible = "zmk,behavior-tri-state";
            label = "TABBER";
            #binding-cells = <0>;
            bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;
        };

        colemak_e: colemak_e {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_E";
            bindings = <&kp F>, <&kp E>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_r: colemak_r {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_R";
            bindings = <&kp P>, <&kp R>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_t: colemak_t {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_T";
            bindings = <&kp B>, <&kp T>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_s: colemak_s {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_S";
            bindings = <&kp R>, <&kp S>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_d: colemak_d {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_D";
            bindings = <&kp S>, <&kp D>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_f: colemak_f {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_F";
            bindings = <&kp T>, <&kp F>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_v: colemak_v {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_V";
            bindings = <&kp D>, <&kp V>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_b: colemak_b {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_B";
            bindings = <&kp V>, <&kp B>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_y: colemak_y {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_Y";
            bindings = <&kp J>, <&kp Y>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_u: colemak_u {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_U";
            bindings = <&kp L>, <&kp U>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_i: colemak_i {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_I";
            bindings = <&kp U>, <&kp I>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_o: colemak_o {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_O";
            bindings = <&kp Y>, <&kp O>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_p: colemak_p {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_P";
            bindings = <&kp SQT>, <&kp P>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_h: colemak_h {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_H";
            bindings = <&kp M>, <&kp H>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_j: colemak_j {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_J";
            bindings = <&kp N>, <&kp J>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_k: colemak_k {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_K";
            bindings = <&kp E>, <&kp K>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_l: colemak_l {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_L";
            bindings = <&kp I>, <&kp L>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_semi: colemak_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_SEMI";
            bindings = <&kp O>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_n: colemak_n {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_N";
            bindings = <&kp K>, <&kp N>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        colemak_m: colemak_m {
            compatible = "zmk,behavior-mod-morph";
            label = "COLEMAK_M";
            bindings = <&kp H>, <&kp M>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        caps: caps {
            compatible = "zmk,behavior-mod-morph";
            label = "CAPS";
            bindings = <&caps_word>, <&kp CAPS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E  &kp R  &kp T      &kp Y      &kp U  &kp I      &kp O    &kp P     &kp LBKT
&lt 5 TAB  &kp A  &kp S  &kp D  &kp F  &kp G      &kp H      &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&caps      &kp Z  &kp X  &kp C  &kp V  &kp B      &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RBKT
                         &mo 2  &mo 1  &kp SPACE  &kp LSHFT  &mo 3  &mo 4
            >;
        };

        NAV {
            bindings = <
&none      &kp LC(LS(N2))  &kp LC(LS(N1))  &kp LC(LG(LEFT))  &kp LC(LG(RIGHT))  &swapper   &kp LG(TAB)  &kp HOME  &kp UP    &kp END        &kp PG_UP      &kp LC(HOME)
&tabber    &kp LGUI        &kp LALT        &kp LCTRL         &kp LSHFT          &kp RET    &kp RET      &kp LEFT  &kp DOWN  &kp RIGHT      &kp PG_DN      &kp LC(END)
&kp LC(Y)  &kp LC(Z)       &kp LC(X)       &kp LC(C)         &kp LC(V)          &kp LG(V)  &kp LG(D)    &kp BSPC  &kp DEL   &kp LC(PG_UP)  &kp LC(PG_DN)  &kp K_APP
                                           &trans            &trans             &trans     &trans       &trans    &trans
            >;
        };

        NUM {
            bindings = <
&kp RA(BACKSLASH)  &kp RA(SLASH)  &kp ASTRK  &kp MINUS  &kp PLUS   &hash_num  &none   &kp N7  &kp N8  &kp N9  &none       &none
&kp PERCENT        &kp LGUI       &kp LALT   &kp LCTRL  &kp LSHFT  &kp F      &none   &kp N4  &kp N5  &kp N6  &kp KP_DOT  &none
&kp RA(N6)         &kp A          &kp B      &kp C      &kp D      &kp E      &none   &kp N1  &kp N2  &kp N3  &kp N0      &none
                                             &trans     &trans     &trans     &trans  &trans  &trans
            >;
        };

        SYM {
            bindings = <
&kp RA(BACKSLASH)  &kp RA(SLASH)         &kp ASTRK            &kp MINUS              &kp PLUS  &hash_num   &kp RA(DOUBLE_QUOTES)  &kp RA(COLON)  &kp RA(SEMICOLON)  &kp UNDERSCORE  &kp RA(QUESTION)  &kp RA(TILDE)
&kp PERCENT        &kp RA(LESS_THAN)     &kp RA(LEFT_BRACE)   &kp RA(LEFT_BRACKET)   &kp LPAR  &kp RA(N4)  &kp RA(SINGLE_QUOTE)   &kp LSHFT      &kp LCTRL          &kp LALT        &kp LGUI          &kp RA(N7)
&kp RA(N6)         &kp RA(GREATER_THAN)  &kp RA(RIGHT_BRACE)  &kp RA(RIGHT_BRACKET)  &kp RPAR  &kp RA(N2)  &kp RA(GRAVE)          &kp RA(DOT)    &kp RA(COMMA)      &kp EQUAL       &kp EXCL          &kp RA(PIPE)
                                                              &trans                 &trans    &trans      &trans                 &trans         &trans
            >;
        };

        FUNC {
            bindings = <
&none  &kp F1  &kp F2   &kp F3   &kp F4   &kp LC(EQUAL)  &kp C_BRI_UP  &none         &none         &none          &none      &kp LA(F4)
&none  &kp F5  &kp F6   &kp F7   &kp F8   &kp LC(MINUS)  &kp C_BRI_DN  &kp LSHFT     &kp LCTRL     &kp LALT       &kp LGUI   &none
&none  &kp F9  &kp F10  &kp F11  &kp F12  &kp LC(N0)     &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &kp LG(LS(S))  &kp PSCRN  &none
                        &trans   &trans   &trans         &trans        &trans        &trans
            >;
        };

        MOUSE {
            bindings = <
&none  &none     &none     &none      &none      &none   &none      &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &msc SCRL_UP    &none
&none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none   &none      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN  &none
&none  &none     &none     &none      &none      &none   &none      &none           &none           &none            &none           &none
                           &trans     &trans     &trans  &mkp LCLK  &mkp RCLK       &mkp MCLK
            >;
        };

        BT {
            bindings = <
&bootloader  &none         &none         &out OUT_USB  &out OUT_BLE  &none         &none         &out OUT_BLE  &out OUT_USB  &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &sys_reset
                                         &trans        &trans        &trans        &trans        &trans        &trans
            >;
        };

        COLEMAK {
            bindings = <
&kp ESC     &kp Q  &kp W       &colemak_e  &colemak_r  &colemak_t  &colemak_y  &colemak_u  &colemak_i  &colemak_o  &colemak_p     &kp LBKT
&lt 5 TAB   &kp A  &colemak_s  &colemak_d  &colemak_f  &kp G       &colemak_h  &colemak_j  &colemak_k  &colemak_l  &colemak_semi  &none
&caps_word  &kp Z  &kp X       &kp C       &colemak_v  &colemak_b  &colemak_n  &colemak_m  &kp COMMA   &kp DOT     &kp FSLH       &kp RBKT
                               &mo 2       &mo 1       &kp SPACE   &kp LSHFT   &mo 3       &mo 4
            >;
        };
    };
};
