#define ZMK_MOUSE_DEFAULT_MOVE_VAL 800  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20   // 10

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

&mmv {
    acceleration-exponent = <1>;  // 1
    time-to-max-speed-ms = <300>; // 300
    delay-ms = <0>;
    trigger-period-ms = <8>;      // 16
};

&msc {
    acceleration-exponent = <1>;  // 0
    time-to-max-speed-ms = <40>;  // 300
    delay-ms = <0>;
    trigger-period-ms = <8>;      // 16
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        bluetooth_left {
            if-layers = <1 2>;
            then-layer = <6>;
        };

        bluetooth_right {
            if-layers = <4 3>;
            then-layer = <6>;
        };
    };

    macros {
        alt_sqt: alt_single_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(Q)>;
            label = "ALT_SINGLE_QUOTE";
        };

        alt_dqt: alt_double_quotes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(W)>;
            label = "ALT_DOUBLE_QUOTES";
        };

        alt_grave: alt_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(E)>;
            label = "ALT_GRAVE";
        };

        alt_lbkt: alt_left_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp R>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_LEFT_BRACKET";
        };

        alt_rbkt: alt_right_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp T>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_RIGHT_BRACKET";
        };

        alt_lbrc: alt_left_brace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp Y>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_LEFT_BRACE";
        };

        alt_rbrc: alt_right_brace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp U>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_RIGHT_BRACE";
        };

        alt_lt: alt_less_than {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp I>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_LESS_THAN";
        };

        alt_gt: alt_greater_than {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp O>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_GREATER_THAN";
        };

        alt_comma: alt_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp P>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_COMMA";
        };

        alt_dot: alt_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp A>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_DOT";
        };

        alt_colon: alt_colon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp S>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_COLON";
        };

        alt_semicolon: alt_semicolon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp D>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_SEMICOLON";
        };

        alt_amps: alt_ampersand {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp F>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_AMPERSAND";
        };

        alt_pipe: alt_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp G>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_PIPE";
        };

        alt_dollar: alt_dollar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp H>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_DOLLAR";
        };

        alt_hash: alt_hash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp J>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_HASH";
        };

        alt_num: alt_num {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp K>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_NUM";
        };

        alt_at: alt_at {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp L>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_AT";
        };

        alt_tilde: alt_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp Z>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_TILDE";
        };

        alt_caret: alt_caret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp X>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_CARET";
        };

        alt_question: alt_question {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_QUESTION";
        };

        alt_backslash: alt_backslash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp V>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_BACKSLASH";
        };

        alt_ruble: alt_ruble {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp F13>,
                <&macro_tap>,
                <&kp B>,
                <&macro_release>,
                <&kp F13>;

            label = "ALT_RUBLE";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_dot {
            bindings = <&alt_dot>;
            key-positions = <31 19>;
            layers = <0>;
        };

        combo_colon {
            bindings = <&alt_colon>;
            key-positions = <19 7>;
            layers = <0>;
        };

        combo_comma {
            bindings = <&alt_comma>;
            key-positions = <20 32>;
            layers = <0>;
        };

        combo_semicolon {
            bindings = <&alt_semicolon>;
            key-positions = <20 8>;
            layers = <0>;
        };

        combo_exclamation {
            bindings = <&kp EXCL>;
            key-positions = <21 33>;
            layers = <0>;
        };

        combo_question {
            bindings = <&alt_question>;
            key-positions = <21 9>;
            layers = <0>;
        };

        combo_single_quote {
            bindings = <&alt_sqt>;
            key-positions = <18 19>;
            layers = <0>;
        };

        combo_double_quotes {
            bindings = <&alt_dqt>;
            key-positions = <6 7>;
            layers = <0>;
        };

        combo_grave {
            bindings = <&alt_grave>;
            key-positions = <30 31>;
            layers = <0>;
        };

        combo_left_bracket {
            bindings = <&alt_lbkt>;
            key-positions = <4 5>;
            layers = <0>;
        };

        combo_left_brace {
            bindings = <&alt_lbrc>;
            key-positions = <28 29>;
            layers = <0>;
        };

        combo_left_parenthesis {
            bindings = <&kp LPAR>;
            key-positions = <16 17>;
            layers = <0>;
        };

        combo_plus {
            bindings = <&kp KP_PLUS>;
            key-positions = <16 28>;
            layers = <0>;
        };

        combo_minus {
            bindings = <&kp KP_MINUS>;
            key-positions = <16 4>;
            layers = <0>;
        };

        combo_multiply {
            bindings = <&kp KP_MULTIPLY>;
            key-positions = <15 27>;
            layers = <0>;
        };

        combo_divide {
            bindings = <&kp KP_DIVIDE>;
            key-positions = <15 3>;
            layers = <0>;
        };

        combo_ampersand {
            bindings = <&alt_amps>;
            key-positions = <17 29>;
            layers = <0>;
        };

        combo_pipe {
            bindings = <&alt_pipe>;
            key-positions = <5 17>;
            layers = <0>;
        };
    };

    behaviors {
        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;

            ignored-key-positions = <8 19 20 21>;
        };

        hash_num: hash_num {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(N3)>, <&kp RA(LS(N3))>;

            mods = <(MOD_LSFT)>;
        };

        slash_backslash: slash_backslash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(SLASH)>, <&kp RA(BACKSLASH)>;

            mods = <(MOD_LSFT)>;
            label = "SLASH_BACKSLASH";
        };

        tabber: tabber {
            compatible = "zmk,behavior-tri-state";
            label = "TABBER";
            #binding-cells = <0>;
            bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp ESC     &kp Q  &kp W  &kp E  &kp R  &kp T      &kp Y      &kp U  &kp I      &kp O    &kp P     &kp LBKT
&lt 5 TAB   &kp A  &kp S  &kp D  &kp F  &kp G      &kp H      &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&caps_word  &kp Z  &kp X  &kp C  &kp V  &kp B      &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RBKT
                          &mo 2  &mo 1  &kp SPACE  &kp LSHFT  &mo 3  &mo 4
            >;
        };

        NAV {
            bindings = <
&tabber        &kp LG(TAB)  &swapper   &kp LC(LG(LEFT))  &kp LC(LG(RIGHT))  &kp LG(D)  &none      &kp HOME  &kp UP    &kp END    &kp PG_UP  &kp LA(F4)
&kp LA(LSHFT)  &kp LGUI     &kp LALT   &kp LCTRL         &kp LSHFT          &kp ENTER  &kp RET    &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_DN  &none
&kp LC(Y)      &kp LC(Z)    &kp LC(X)  &kp LC(C)         &kp LC(V)          &kp LG(V)  &kp K_APP  &kp BSPC  &kp DEL   &none      &none      &kp CAPS
                                       &trans            &trans             &trans     &trans     &trans    &trans
            >;
        };

        NUM {
            bindings = <
&kp A  &none     &none     &none      &alt_caret  &kp D   &kp KP_MINUS  &kp N7  &kp N8  &kp N9  &kp KP_SLASH     &kp UNDER
&kp B  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT   &kp E   &kp KP_PLUS   &kp N4  &kp N5  &kp N6  &kp KP_MULTIPLY  &hash_num
&kp C  &kp EXCL  &alt_lt   &alt_gt    &kp EQUAL   &kp F   &kp KP_DOT    &kp N1  &kp N2  &kp N3  &kp N0           &kp PRCNT
                           &trans     &trans      &trans  &trans        &trans  &trans
            >;
        };

        SYM {
            bindings = <
&none  &kp RA(TILDE)         &kp RA(N2)           &hash_num              &kp RA(N4)  &none   &kp RA(DOUBLE_QUOTES)  &kp RA(COLON)  &kp RA(SEMICOLON)  &kp UNDERSCORE  &kp RA(QUESTION)  &kp RA(PIPE)
&none  &kp RA(LESS_THAN)     &kp RA(LEFT_BRACE)   &kp RA(LEFT_BRACKET)   &kp LPAR    &none   &kp RA(SINGLE_QUOTE)   &kp LSHFT      &kp LCTRL          &kp LALT        &kp LGUI          &slash_backslash
&none  &kp RA(GREATER_THAN)  &kp RA(RIGHT_BRACE)  &kp RA(RIGHT_BRACKET)  &kp RPAR    &none   &kp RA(GRAVE)          &kp RA(DOT)    &kp RA(COMMA)      &kp MINUS       &kp EXCL          &kp RA(N7)
                                                  &trans                 &trans      &trans  &trans                 &trans         &trans
            >;
        };

        FUNC {
            bindings = <
&none  &kp F1  &kp F2   &kp F3   &kp F4   &none   &none       &kp C_BRI_DN  &kp C_BRI_UP  &none          &none      &none
&none  &kp F5  &kp F6   &kp F7   &kp F8   &none   &none       &kp LSHFT     &kp LCTRL     &kp LALT       &kp LGUI   &none
&none  &kp F9  &kp F10  &kp F11  &kp F12  &none   &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp LG(LS(S))  &kp PSCRN  &none
                        &trans   &trans   &trans  &trans      &trans        &trans
            >;
        };

        MOUSE {
            bindings = <
&none  &none     &none     &none      &none      &none   &none      &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &msc SCRL_UP    &none
&none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none   &none      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN  &none
&none  &none     &none     &none      &none      &none   &none      &none           &none           &none            &none           &none
                           &trans     &trans     &trans  &mkp LCLK  &mkp RCLK       &mkp MCLK
            >;
        };

        BT {
            bindings = <
&bootloader  &none         &none         &out OUT_USB  &out OUT_BLE  &none         &none         &out OUT_BLE  &out OUT_USB  &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &sys_reset
                                         &trans        &trans        &trans        &trans        &trans        &trans
            >;
        };
    };
};
